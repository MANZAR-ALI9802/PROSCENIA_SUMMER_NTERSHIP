
 **React Project Folder Structure**

---

### 📘 Why Folder Structure Matters

Organizing files properly:

* Keeps code clean and maintainable
* Helps scale your app
* Makes it easier for teams to work together

---

### ✅ Basic React App Structure (Default by `create-react-app`)

When you run `npx create-react-app my-app`, you get:

```
my-app/
├── node_modules/
├── public/
│   └── index.html
├── src/
│   ├── App.css
│   ├── App.js
│   ├── index.js
│   └── ...
├── package.json
```

> This is fine for **small projects**, but as your app grows, it's better to organize into **feature-based folders**.

---

## 📁 Recommended Folder Structure (for real-world projects)

```
my-app/
├── public/
├── src/
│   ├── assets/            # Images, fonts, icons
│   ├── components/        # Reusable UI components (Button, Card)
│   ├── pages/             # Route-level pages (Home, About, Blog)
│   ├── hooks/             # Custom React hooks
│   ├── context/           # React Context API providers
│   ├── services/          # API calls (e.g., fetchPosts.js)
│   ├── styles/            # Global styles (CSS, SCSS, Tailwind config)
│   ├── App.js
│   ├── index.js
│   └── routes.js          # Optional: Route definitions
```

---

### ✅ Example with Code

#### `src/pages/Home.js`

```jsx
import React from 'react';
import Header from '../components/Header';

function Home() {
  return (
    <div>
      <Header />
      <h1>🏡 Welcome to the Home Page</h1>
    </div>
  );
}

export default Home;
```

---

#### `src/components/Header.js`

```jsx
import React from 'react';
import { Link } from 'react-router-dom';

function Header() {
  return (
    <nav>
      <Link to="/">Home</Link> |{' '}
      <Link to="/about">About</Link>
    </nav>
  );
}

export default Header;
```

---

#### `src/services/api.js`

```jsx
export const fetchPosts = async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/posts');
  const data = await response.json();
  return data;
};
```

---

#### `src/hooks/usePosts.js`

```jsx
import { useState, useEffect } from 'react';
import { fetchPosts } from '../services/api';

export default function usePosts() {
  const [posts, setPosts] = useState([]);

  useEffect(() => {
    fetchPosts().then(setPosts);
  }, []);

  return posts;
}
```

---

## ✅ Benefits of This Structure

| Folder        | Purpose                                 |
| ------------- | --------------------------------------- |
| `components/` | Small, reusable pieces of UI            |
| `pages/`      | Route-specific screens                  |
| `hooks/`      | Encapsulate logic (like fetching posts) |
| `services/`   | Handles APIs or external logic          |
| `context/`    | Global state (like theme, user)         |
| `assets/`     | Images, fonts, icons                    |
| `styles/`     | Tailwind config, CSS files              |

---

### 🧠 Tips

* Use **PascalCase** for component names: `BlogList`, `UserCard`
* Group related files (e.g., `Post.js`, `Post.css`) together
* Keep `App.js` clean by routing to `pages/`

