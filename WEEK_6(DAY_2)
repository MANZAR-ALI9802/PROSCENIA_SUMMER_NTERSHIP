JSX, Functional Components, and Props**

---

## 📘 1. What is JSX?

### 🔹 JSX (JavaScript XML) is:

A **syntax extension** for JavaScript that looks like HTML and is used in React to describe UI.

### 🧠 Why use JSX?

* Easier to write and understand UI
* Integrates JavaScript logic directly
* React uses JSX to create **Virtual DOM elements**

### ⚠️ JSX is **not HTML** — it gets **compiled to JavaScript** by tools like Babel.

---

## ✅ Example of JSX:

```jsx
const element = <h1>Hello, JSX!</h1>;
```

JSX is compiled into:

```js
const element = React.createElement('h1', null, 'Hello, JSX!');
```

---

## 🔍 JSX Rules You Must Know:

| Rule                               | Description                                        |
| ---------------------------------- | -------------------------------------------------- |
| Must return **one parent element** | Wrap multiple elements in `<div>` or `<>...</>`    |
| Use **camelCase**                  | Example: `onClick`, `className` instead of `class` |
| Use **expressions in `{}`**        | Like `{name}`, `{2 + 2}`, `{myFunction()}`         |
| Close **all tags**                 | `<img />`, `<br />`, etc.                          |

---

## 🧱 2. What is a Component in React?

React apps are **built using components**.

A **component** is a reusable function or class that returns JSX.

---

## 🧩 Two Types of Components:

| Type       | Syntax    | Example                         |
| ---------- | --------- | ------------------------------- |
| Functional | Function  | ✅ Preferred                     |
| Class      | ES6 class | (older method, less common now) |

---

### ✅ Functional Component Example:

```jsx
function Welcome() {
  return <h2>Hello from Welcome Component!</h2>;
}
```

---

## 📦 3. Props in React (Short for “Properties”)

### 🔹 Props are used to **pass data to components**.

Think of props as **function parameters**.

### ✅ Example:

```jsx
function Welcome(props) {
  return <h2>Hello, {props.name}!</h2>;
}

function App() {
  return <Welcome name="Ali" />;
}
```

### 🔍 What happens here?

* `App` calls `Welcome` and gives it a prop `name="Ali"`.
* Inside `Welcome`, `props.name` is `"Ali"`.

---

## 🧪 Complete Demo Project (JSX + Functional Components + Props)

### 📁 File: `App.js`

```jsx
import React from 'react';
import Welcome from './Welcome';

function App() {
  return (
    <div>
      <h1>🌟 React Components & Props Demo</h1>
      <Welcome name="Ali" />
      <Welcome name="Sara" />
      <Welcome name="Ahmed" />
    </div>
  );
}

export default App;
```

---

### 📁 File: `Welcome.js`

```jsx
import React from 'react';

function Welcome(props) {
  return (
    <div>
      <h2>Welcome, {props.name} 👋</h2>
    </div>
  );
}

export default Welcome;
```

---

## 🧠 Summary

| Concept              | Description                         |
| -------------------- | ----------------------------------- |
| JSX                  | JavaScript + HTML                   |
| Functional Component | Function that returns JSX           |
| Props                | Data passed to components           |
| One Parent Element   | JSX must return one wrapper element |

---

### ✅ Output in Browser:

```
🌟 React Components & Props Demo
Welcome, Ali 👋
Welcome, Sara 👋
Welcome, Ahmed 👋
